#!/usr/bin/env python

import sys
import os
import common

SA_CLANG_CPP = "${CLANG_PP_PATH}"  # note: this is system specific and set in cmake
SA_CLANG = "${CLANG_PATH}"  # note: this is system specific and set in cmake

if __name__ == "__main__":
    argparser = common.GetArgParser()
    args, compiler_args = argparser.parse_known_args()
    command = [SA_CLANG_CPP] + compiler_args

    if args.checkers == ['']:
        args.checkers = []

    source_file_paths = []
    for argument in compiler_args:
        if common._IsSourceFile(argument):
            source_file_paths.append(argument)

    if args.disabled_checkers:
        for checker_name in args.disabled_checkers:
            command += ["-Xclang", "-analyzer-disable-checker", "-Xclang", checker_name]

    if args.sa_configuration:
        os.environ["SA_CONFIGURATION"] = args.sa_configuration

    omit_checks = False
    if(args.ignore_dirs):
        for directory in args.ignore_dirs:
            for path in source_file_paths:
                if path.startswith(directory):
                    omit_checks = True

    if omit_checks:
        retCode = common.Analyze(command, SA_CLANG_CPP, do_not_compile=args.do_not_compile)
    else:
        retCode = common.Analyze(command, SA_CLANG_CPP,
                                 format_on=args.check_format,
                                 modernize_on=args.modernize,
                                 modernize_options=args.modernize_options,
                                 sa_checkers=args.checkers,
                                 comparison_report_dir=args.comparison_report_dir,
                                 do_not_compile=args.do_not_compile)

    sys.exit(retCode)

